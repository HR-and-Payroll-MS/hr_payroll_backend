Employees Module
======================================================================

Models
----------------------------------------------------------------------

- Department: simple org grouping (unique name)
- Employee: one-to-one with User; fields include department, title, hire_date
- EmployeeDocument: file uploads linked to Employee (path includes employee PK)

API Endpoints
----------------------------------------------------------------------

- Departments: ``/api/v1/departments/`` (Admin/Manager write; authenticated read)
- Employees: ``/api/v1/employees/``
  - Regular employees see only their own record; Admin/Manager see all
  - Create via one of two manager-only onboarding endpoints (see below)
- Employee Documents: ``/api/v1/employee-documents/``
  - Regular employees can upload only for themselves; elevated users may upload for anyone

Onboarding (Manager/Admin only)
----------------------------------------------------------------------

End-to-end creation of a User and their Employee *with autogenerated credentials*,
or promotion of an existing user to Employee. See :doc:`onboarding` for the
full credential generation specification.

- New User + Employee: ``POST /api/v1/employees/onboard/new``
  - Input fields accepted: ``first_name``, ``last_name``, optional ``department``,
    ``title``, ``hire_date``.
  - Username, email, and initial password are always generated server-side and
    returned (one-time) under a ``credentials`` block.

- Promote Existing User: ``POST /api/v1/employees/onboard/existing``
  - Body example: ``{"user": "bob", "department": 3, "title": "Analyst"}``
  - Rejects users who already have an Employee record.

Nested Representation
----------------------------------------------------------------------
Employee responses embed related objects:

.. code-block:: json

    {
      "id": 7,
      "user": {
        "id": 42,
        "username": "jrobert001",
        "email": "jrobert001@hr_payroll.com",
        "first_name": "John",
        "last_name": "Robertson",
        "is_active": true
      },
      "department": {"id": 3, "name": "Engineering", "description": ""},
      "title": "Engineer",
      "credentials": {  // present only immediately after onboarding
        "username": "jrobert001",
        "email": "jrobert001@hr_payroll.com",
        "initial_password": "Ab9!xYt2Qw$z"
      }
    }

Credential Recovery
----------------------------------------------------------------------
Temporary retrieval and regeneration of credentials is documented in
:doc:`credential_recovery`.

Integration note for frontend
------------------------------

When creating an Employee (either onboarding a new user or promoting an existing
user), the API returns a nested representation for the `user` and `department`
fields. Frontend clients should expect the `user` field to be an object with
these keys at minimum: ``id``, ``username``, ``email``, ``first_name``,
``last_name``, ``is_active``. Do not rely on the top-level `user` value being a
string: older versions returned just the username but the API now returns a
full nested object to reduce extra lookups.

Example (successful create response):

.. code-block:: json

    {
      "id": 7,
      "user": {
        "id": 42,
        "username": "jrobert001",
        "email": "jrobert001@hr_payroll.com",
        "first_name": "John",
        "last_name": "Robertson",
        "is_active": true
      },
      "department": {"id": 3, "name": "Engineering", "description": ""},
      "title": "Engineer",
      "credentials": {  // present only immediately after onboarding
        "username": "jrobert001",
        "email": "jrobert001@hr_payroll.com",
        "initial_password": "Ab9!xYt2Qw$z"
      }
    }

Notes:

- `credentials` are only returned when a user account was created during the
  onboarding call (``/api/v1/employees/onboard/new``). They are available
  once and are not stored in cleartext on the server.
- To assign an existing user during create, POST the user's `username` or `id`
  using the `user` field; the response will still return the nested `user`.

Uploads & Validation
----------------------------------------------------------------------

- Allowed extensions: .pdf .png .jpg .jpeg .txt
- Max size: 5MB
- Server-side validation on both model and serializer

Security & Object Permissions
----------------------------------------------------------------------

- Admin/Manager can write across Departments/Employees/EmployeeDocuments
- Regular employees can read and modify their own resources only
